#!/usr/bin/env php
<?php

use Composer\InstalledVersions;

require_once __DIR__ . '/vendor/composer/InstalledVersions.php';

$installedPath = __DIR__ . '/vendor/composer/installed.json';
$installed = json_decode(file_get_contents($installedPath), true);

$params = getParams();

$types = [
    "portalium-core",
    "portalium-theme",
    "portalium-module"
];

$packagesList = [];

foreach ($types as $type) {
    foreach (InstalledVersions::getInstalledPackagesByType($type) as $package) {
        $packagesList[] = $package;
    }
}


$packagesJson = [];
foreach ($installed["packages"] as $package => $data) {
    if (in_array($data["name"], $packagesList)) {
        $packagesJson[] = $data;
    }
}

$required = [];
foreach ($packagesJson as $package) {
    if (isset($package["require"])) {
        $required[$package["name"]] = $package["require"];
    }else{
        $required[$package["name"]] = [];
    }
}

$installedPackages = [];
$cyclePackages = [];
$requiredPackages = [];

foreach ($required as $key => $value) {
    $requiredPackages[$key] = getRequiredRecursive($required, $key, $types);
}

passthru("php portalium migrate --migrationPath=@yii/rbac/migrations --interactive=0");

for ($i = 0; $i < count($installedPackages); $i++) {
    $key = $installedPackages[$i];
    if (!in_array($installedPackages[$i], $cyclePackages)){
        $return = execCommand(getPsr4($key), "/migrations");
    }else{
        echo "Cycle detected: " . $key . "\n";
        $parent = $installedPackages[$i];
        $child = $cyclePackages[$parent];
        solveInfiniteLoop($parent, $child);
    }
}
$menuMigrationsScript = [
    "php portalium migrate --migrationPath=@portalium/menu/migrations/menu --interactive=0",
    "php portalium migrate --migrationPath=@portalium/user/migrations/menu --interactive=0",
    "php portalium migrate --migrationPath=@portalium/site/migrations/menu --interactive=0",
];
if (isset($params['noIndex'])){
    foreach ($menuMigrationsScript as $script){
        $script .= " --noIndex";
    }
}

foreach ($menuMigrationsScript as $script){
    passthru($script);
}

for ($i = 0; $i < count($installedPackages); $i++) {
    $key = $installedPackages[$i];
    $return = execCommand(getPsr4($key), "/migrations/menu");
}

for ($i = 0; $i < count($installedPackages); $i++) {
    $key = $installedPackages[$i];
    $return = execCommand(getPsr4($key), "/migrations/post");
}

/**
 * 
 * @param $name
 * @return string
 */
function getPsr4($name){
    $composerFile = __DIR__ . '/vendor/' . $name . '/composer.json';
    $composer = json_decode(file_get_contents($composerFile), true);
    $autoloadPsr4 = $composer["autoload"]["psr-4"];
    return str_replace("\\", "/", array_keys($autoloadPsr4)[0]);
}

/**
 * @param $packageName
 * @return string
 * @description Get package path
 */
function getPackageType($packageName){
    $installedPath = __DIR__ . '/vendor/composer/installed.json';
    $installed = json_decode(file_get_contents($installedPath), true);
    foreach ($installed["packages"] as $package => $data) {
        if ($data["name"] == $packageName) {
            return $data["type"];
        }
    }
}

/**
 * @param $required
 * @param $package
 * @param $types
 * @param $result = []
 * @return array
 */
function getRequiredRecursive($required, $package, $types, $result = []) {
    global $installedPackages;
    global $cyclePackages;
    if (isset($required[$package]) && !in_array($package, $installedPackages)) {
        foreach ($required[$package] as $key => $value) {
            if(!in_array(getPackageType($key), $types)){
                continue;
            }
            $result[$key] = $value;
            if(checkCycle($package, $key, $required)){
                $cyclePackages[$key] = $package;
                continue;
            }
            $result = getRequiredRecursive($required, $key, $types, $result);
        }
    }
    if (!in_array($package, $installedPackages)) {
        array_push($installedPackages, $package);
    }
    return $result;
}

/**
 * @param $parent
 * @param $child
 * @param $required
 */
function checkCycle($parent, $child, $required){
    if (isset($required[$child])) {
        foreach ($required[$child] as $key => $value) {
            if ($key == $parent) {
                return true;
            }
        }
    }
    return false;
}

/**
 * @param $parent
 * @param $child
 */
function solveInfiniteLoop($parent, $child){

        global $requiredPackages;
        $return = execCommand(getPsr4($parent,4), "/migrations", false);
        if ($return != 0) {
            $childRequired = $requiredPackages[$child];
            if(count($childRequired) > 1){
                migrateRequired($childRequired);
            }
            $return = execCommand(getPsr4($child), "/migrations");
            if ($return == 0){
            
                $return = execCommand(getPsr4($parent), "/migrations");
            }
            
        }else{
            $childRequired = $requiredPackages[$child];
            if(count($childRequired) > 1){
                migrateRequired($childRequired);
            }
            $return = execCommand(getPsr4($parent), "/migrations");
        }
}

/**
 * @param $required
 */
function migrateRequired($required){
    global $requiredPackages;
    global $params;
    foreach ($required as $key => $value) {
        $childRequired = $requiredPackages[$key];
        migrateRequired($childRequired);
    }
    if(!empty($childRequired)){
        $script = "php portalium migrate --migrationPath=@" . getPsr4($key) . "/migrations";
        if (isset($params['noIndex'])){
            $script .= " --noIndex";
        }
        passthru($script, $return);
        if ($return != 0) {
            exit;
        }
    }
}

/**
 * @param $package
 * @param bool $return
 * @return int
 */
function execCommand($package,$path, $exit = true){
    global $params;
    $script = "php portalium migrate --migrationPath=@" . $package . $path ." --interactive=0";
    
    if (isset($params['noIndex'])){
        $script .= " --noIndex";
    }
    
    passthru($script, $return);
    if ($return != 0 && $exit) {
        exit;
    }
    return $return;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}
